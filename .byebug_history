continue
shift.errors
shift.valid?
expect(shift).not_to be_valid
shift.valid?
shift.start_time="lunes"
up
step
up
step
expect(shift).not_to be_valid
shift.valid?
shift.start_time=nil
shift.valid?
continue
shift.errors
self.errors
errors
shift.valid?
shift
shift.start_time="lunes"
shift
exit
end
continue
up
step
continue
self.start_time
self.end_time
self
up
step
up
step
up
step
help
up
step
up
step
self
up
step
DateTime.new(2001,1,1,10,0)
self.start_time < self.end_time
self.end_time.min
self.start_time.min
self.start_time.hour
self.end_time
self.start_time
self
exit
continue
self
continue
shift.valid?
shift
continue
of.errors
of.save
of.shift
of
exit
brother
offspring.errors
continue
up
step
up
step
offspring.errors.count
offspring.errors
up
step
offspring
offspring.user.offsprings.first.last_name
offspring.user.offpsrings.first.last_name
offspring.last_name
exit
brother.valid?
brother.user
brother
child.user
child
exit
brother.user.offsprings.count
brother.user.offsprings
brother.user
brother
child.user
child
continue
offspring.user.offsprings.count
continue
offspring.user
offspring
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
continue
offspring.user.offsprings.count
offspring.user.offpsrings.count
offspring.user
ofsspring.user
offspring
exit
offspring.user.offsprings.first
offspring.user
offspring
exit
child.valid?
child
exit
child.valid?
child
grade
exit
offspring.last_name==offspring.user.offsprings.first.last_name
offspring.last_name==offspring.user.offsprings.first.last_name?
offspring.last_name==offspring.user.offsrpings.first.last_name?
offspring.last_name==offspring.user.offsrpings.first.last_name
offspring.last_name
last_name
if offspring.user.offsprings.first && offspring.user.offpsrings.first.last_name == last_name
if offspring.user.offsprings.first
offspring.user
offspring
offsrping.user
offspring.user.offsprings.first
offspring.user
ofsrping.user
offspring
exit
continue
exit
offspring.user.offsprings.each
offspring.user.offsprings
offspring.user
offspring
exit
offspring.user.offsprings.each
offspring.last_name
offspring
last_name.to_s
last_name
offspring.last_name
last_name
offspring
exit
offspring.user.offsprings.each
offspring.user.offsprings
offspring.user
offspring
continue
shift.errors([:shift])
shift.errors
shift.valid?
shift.room.capacity
shift.prebooked
shift.prebooked=shift.room.capacity+1
shift.room.capacity+1
shift.prebooked
exit
continue
shift.room
shift.sites_available
shift.sites_available?
shift
exit
room
self.prebooked
self.shites_available?
self
self.sites_available?
continue
shift.errors
shift.valid?
expect(shift).not_to be_valid
shift.valid?
shift.start_time="lunes"
up
step
up
step
expect(shift).not_to be_valid
shift.valid?
shift.start_time=nil
shift.valid?
continue
shift.errors
self.errors
errors
shift.valid?
shift
shift.start_time="lunes"
shift
exit
end
continue
up
step
continue
self.start_time
self.end_time
self
up
step
up
step
up
step
help
up
step
up
step
self
up
step
DateTime.new(2001,1,1,10,0)
self.start_time < self.end_time
self.end_time.min
self.start_time.min
self.start_time.hour
self.end_time
self.start_time
self
exit
continue
self
continue
shift.valid?
shift
continue
offsprings_params
offspring_params
exit
offsprings_params
offpsrings_params
offsprings_params
continue
params
continue
redirect_to home_path
redirect_to home_pth
redirect_to home
cancel
params
current_user.offsprings.build(offsprings_params)
current_user
exit
var all
var local
offspring.shift.nil?
offspring.shift
offspring
offsrping
shift
exit
offspring
shift
quit
offspring.shift?
shift.sites_available?
shift.nil?
shift
continue
offspring.valid?
offspring
exit
offspring.shift.nil?
offspring.shift.valid?
offspring.valid?
offspring
shift.valid?
exit
offspring.valid?
offspring
shift
exit
offspring.shift.valid?
offspring.shift=shift
offspring.shift.nil?
offspring.shift
shift
offspring.valid?
offspring
offpsring
shift.save
shift
exit
shift.sites_available?
shift.sites_available
shift.sites_available?
shift.valid?
shift.prebooked=shift.room.capacity
shift.room.capacity
shift.valid?
shift
